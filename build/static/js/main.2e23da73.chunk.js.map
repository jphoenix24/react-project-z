{"version":3,"sources":["component/HeaderElement/index.js","component/Header/index.js","component/NameElement/index.js","component/NameList/index.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","display","justifyContent","flexWrap","margin","spacing","avatar","backgroundColor","HeaderElement","name","onClick","classes","className","Chip","Avatar","first_name","last_name","label","onDelete","Header","selectedNameList","map","index","key","NameElement","NameList","props","nameList","useState","filterName","setFilterName","useEffect","console","log","TextField","fullWidth","InputProps","input","onChange","e","userInput","target","value","filteredOptions","filter","toLowerCase","indexOf","App","setNameList","values","setValues","Tabletop","init","callback","googleData","simpleSheet","loader","length","type","color","height","width","temp","el","find","push","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2e23da73.chunk.js","sourcesContent":["import React from \"react\";\nimport { Chip, Avatar } from \"@material-ui/core\";\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    justifyContent: 'center',\n    flexWrap: 'wrap',\n    margin: 3,\n    '& > *': {\n      margin: theme.spacing(0.5),\n    },\n  },\n  avatar: {\n    backgroundColor: `red`,\n  }\n}));\n\nfunction HeaderElement({ name, onClick }) {\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n        <Chip\n        avatar={<Avatar>{name.first_name[0]}{name.last_name[0]}</Avatar>}\n        label={`${name.first_name} ${name.last_name}`}\n        onDelete={onClick}\n      />\n    </div>\n  );\n}\n\nexport default HeaderElement;\n","import React from 'react';\nimport HeaderElement from '../HeaderElement';\n\nfunction Header({selectedNameList, onClick}) {\n  return (\n    <div className=\"headerContainer\">\n      {selectedNameList.map((name, index) => <HeaderElement name={name} onClick={() => onClick(index)} key={index} />)}\n    </div>\n  );\n}\n\nexport default Header;\n","import React from 'react';\n\nfunction NameElement({name, onClick}) {\n  return (\n    <div className=\"nameElement\" onClick={onClick}>\n        <div className=\"avatarDiv\">\n            {`${name.first_name[0]}${name.last_name[0]}`}\n        </div>\n            {`${name.first_name} ${name.last_name}`}\n    </div>\n  );\n}\n\nexport default NameElement;","import React, { useState, useEffect } from \"react\";\nimport NameElement from \"../NameElement\";\nimport { TextField } from \"@material-ui/core\";\n\nfunction NameList(props) {\n    const {nameList, onClick} = props;\n  const [filterName, setFilterName] = useState([...nameList]);\n   \n  useEffect(() => {\n    setFilterName([...nameList]);\n    console.log(\"===\");\n  }, [nameList]);\n\n  const onChange = (e) => {\n    const userInput = e.target.value;\n    const filteredOptions = nameList.filter(\n      (name) =>\n        name.first_name.toLowerCase().indexOf(userInput.toLowerCase()) > -1\n    );\n    setFilterName([...filteredOptions]);\n  };\n\n  return (\n    <div className=\"mainBody\">\n      <div className=\"searchBox\">\n        <TextField\n          label=\"Enter another name\"\n          fullWidth\n          InputProps={{\n            classes: {\n                input: \"inputField\",\n            },\n          }}\n          onChange={(e) => onChange(e)}\n        />\n      </div>\n      <div className=\"nameList\">\n        {filterName.map((name, index) => (\n          <NameElement name={name} onClick={() => onClick(name)} key={index} />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default NameList;\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Header from './component/Header';\nimport NameList from './component/NameList';\nimport Tabletop from 'tabletop';\nimport {find } from 'lodash';\nimport Loader from 'react-loader-spinner';\n\nfunction App() {\n  const [nameList, setNameList] = useState([]);\n  const [values, setValues] = useState({\n    selectedNameList: [],\n  });\n\n  useEffect(() => {\n    Tabletop.init({\n      key: '1nR-4bQXkOAuj-mq1dka3rD73_eblVh0DL1rzPcyhzy0',\n      callback: googleData => {\n        setNameList([...googleData]);\n      },\n      simpleSheet: true,\n    });\n  }, []);\n\n  const onClick = (name) => {\n    let temp = [...values.selectedNameList];\n    if(!find(temp, name)) {\n      temp.push(name);\n    }\n    setValues({...values, selectedNameList: temp});\n  }\n\n  const removeSelected = (index) => {\n    let temp = [...values.selectedNameList.filter(function(el){ return el !== values.selectedNameList[index]; })];\n    setValues({...values, selectedNameList: temp});\n  };\n\n  const loader = nameList.length > 0 ? false : true;\n\n  return (\n    <div className=\"container\">\n       {!!loader ? \n       <div className=\"loadSpinner\"><Loader\n         type=\"Puff\"\n         color=\"#00BFFF\"\n         height={100}\n         width={100}\n      /></div> :\n      <div>\n        <Header selectedNameList={values.selectedNameList} onClick={removeSelected} />\n        <NameList nameList={nameList} onClick={onClick} />\n      </div>}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}